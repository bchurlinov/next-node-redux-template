{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { AUTHENTICATE, DEAUTHENTICATE, GET_PROFILE } from \"./types\";\nimport Router from \"next/router\";\nimport cookie from \"js-cookie\";\nimport axios from \"axios\";\nexport var authenticate = function authenticate(user) {\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios.post(\"http://localhost:3000/api/auth/login\", user));\n\n          case 2:\n            response = _context.sent;\n            dispatch(getProfile());\n            setCookie(\"token\", response.data.token);\n            dispatch({\n              type: AUTHENTICATE,\n              payload: response\n            });\n            setTimeout(function () {\n              Router.push(\"/\");\n            }, 0);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getProfile = function getProfile(id) {\n  return function _callee2(dispatch) {\n    var _await$axios$get, data;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(axios.get(\"http://localhost:3000/api/auth/profile/5ea42b795e51a2439429da54\"));\n\n          case 2:\n            _await$axios$get = _context2.sent;\n            data = _await$axios$get.data;\n            dispatch({\n              type: GET_PROFILE,\n              payload: data.user\n            });\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n}; // gets the token from the cookie and saves it in the store\n\nexport var reauthenticate = function reauthenticate(token) {\n  return function (dispatch) {\n    dispatch({\n      type: AUTHENTICATE,\n      payload: token\n    });\n  };\n}; // removing the token\n\nexport var deauthenticate = function deauthenticate() {\n  return function (dispatch) {\n    removeCookie('token');\n    Router.push('/');\n    dispatch({\n      type: DEAUTHENTICATE\n    });\n  };\n}; // Helper Functions\n\nexport var setCookie = function setCookie(key, value) {\n  if (true) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n};\nexport var removeCookie = function removeCookie(key) {\n  if (true) {\n    cookie.remove(key);\n  }\n};\nexport var getCookie = function getCookie(key, req) {\n  return true ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n};\n\nvar getCookieFromBrowser = function getCookieFromBrowser(key) {\n  return cookie.get(key);\n};\n\nvar getCookieFromServer = function getCookieFromServer(key, req) {\n  if (!req.headers.cookie) {\n    return undefined;\n  }\n\n  var rawCookie = req.headers.cookie.split(';').find(function (c) {\n    return c.trim().startsWith(\"\".concat(key, \"=\"));\n  });\n\n  if (!rawCookie) {\n    return undefined;\n  }\n\n  return rawCookie.split('=')[1];\n};\n\nexport var checkServerSideCookie = function checkServerSideCookie(ctx) {\n  return function _callee3(dispatch) {\n    var token, _token;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (ctx.isServer) {\n              if (ctx.req.headers.cookie) {\n                token = getCookie('token', ctx.req);\n                ctx.store.dispatch(reauthenticate(token));\n              }\n            } else {\n              _token = ctx.store.getState().authentication.token;\n\n              if (_token && ctx.pathname === \"/signin\") {\n                Router.push(\"/\");\n              }\n            }\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["E:/pratice-projects/next-js-redux/redux/authActions.js"],"names":["AUTHENTICATE","DEAUTHENTICATE","GET_PROFILE","Router","cookie","axios","authenticate","user","dispatch","post","response","getProfile","setCookie","data","token","type","payload","setTimeout","push","id","get","reauthenticate","deauthenticate","removeCookie","key","value","set","expires","remove","getCookie","req","getCookieFromBrowser","getCookieFromServer","headers","undefined","rawCookie","split","find","c","trim","startsWith","checkServerSideCookie","ctx","isServer","store","getState","authentication","pathname"],"mappings":"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","sourcesContent":["import {AUTHENTICATE, DEAUTHENTICATE, GET_PROFILE} from \"./types\";\r\nimport Router from \"next/router\";\r\nimport cookie from \"js-cookie\";\r\nimport axios from \"axios\";\r\n\r\nexport const authenticate = user => {\r\n    return async (dispatch) => {\r\n\r\n        const response = await axios.post(\"http://localhost:3000/api/auth/login\", user);\r\n\r\n        dispatch(getProfile());\r\n\r\n        setCookie(\"token\", response.data.token);\r\n\r\n        dispatch({\r\n            type: AUTHENTICATE,\r\n            payload: response\r\n        });\r\n\r\n        setTimeout(() => {\r\n            Router.push(\"/\");\r\n        }, 0)\r\n    }\r\n}\r\n\r\nexport const getProfile = id => {\r\n    return async(dispatch) => {\r\n        const {data} = await axios.get(\"http://localhost:3000/api/auth/profile/5ea42b795e51a2439429da54\");\r\n        dispatch({\r\n            type: GET_PROFILE,\r\n            payload: data.user\r\n        })\r\n    }\r\n}\r\n\r\n// gets the token from the cookie and saves it in the store\r\nexport const reauthenticate = token => {\r\n    return dispatch => {\r\n        dispatch({ type: AUTHENTICATE, payload: token });\r\n    };\r\n};\r\n\r\n// removing the token\r\nexport const deauthenticate = () => {\r\n    return dispatch => {\r\n        removeCookie('token');\r\n        Router.push('/');\r\n        dispatch({ type: DEAUTHENTICATE });\r\n    };\r\n};\r\n\r\n// Helper Functions\r\n\r\nexport const setCookie = (key, value) => {\r\n    if (process.browser) {\r\n        cookie.set(key, value, {\r\n            expires: 1,\r\n        });\r\n    }\r\n};\r\n\r\nexport const removeCookie = key => {\r\n    if (process.browser) {\r\n        cookie.remove(key);\r\n    }\r\n};\r\n\r\nexport const getCookie = (key, req) => {\r\n    return process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\r\n};\r\n\r\nconst getCookieFromBrowser = key => {\r\n    return cookie.get(key);\r\n};\r\n\r\nconst getCookieFromServer = (key, req) => {\r\n    if (!req.headers.cookie) {\r\n        return undefined;\r\n    }\r\n    const rawCookie = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\r\n    if (!rawCookie) {\r\n        return undefined;\r\n    }\r\n    return rawCookie.split('=')[1];\r\n};\r\n\r\nexport const checkServerSideCookie = ctx => {\r\n    return async(dispatch) => {\r\n        if (ctx.isServer) {\r\n            if (ctx.req.headers.cookie) {\r\n                const token = getCookie('token', ctx.req);\r\n                ctx.store.dispatch(reauthenticate(token));\r\n            }\r\n        } else {\r\n            const token = ctx.store.getState().authentication.token;\r\n\r\n            if (token && ctx.pathname === \"/signin\") {\r\n                Router.push(\"/\")\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}