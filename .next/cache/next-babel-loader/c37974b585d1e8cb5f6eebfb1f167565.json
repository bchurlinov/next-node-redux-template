{"ast":null,"code":"import { AUTHENTICATE } from \"./types\";\nimport Router from \"next/router\";\nimport cookie from \"js-cookie\";\nexport const authenticate = user => {\n  return async dispatch => {\n    const response = \"143lkjnd0a9sjndkalnsdjl1nk2n1029jneklnasdmnaklsndiop12\";\n    dispatch({\n      type: AUTHENTICATE,\n      payload: response\n    });\n    setTimeout(() => {\n      Router.push(\"/\");\n    }, 1000);\n  };\n};\nexport const setCookie = (key, value) => {\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1,\n      path: '/'\n    });\n  }\n};\nexport const removeCookie = key => {\n  if (false) {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n};\nexport const getCookie = (key, req) => {\n  return false ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n};\n\nconst getCookieFromBrowser = key => {\n  return cookie.get(key);\n};\n\nconst getCookieFromServer = (key, req) => {\n  if (!req.headers.cookie) {\n    return undefined;\n  }\n\n  const rawCookie = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\n\n  if (!rawCookie) {\n    return undefined;\n  }\n\n  return rawCookie.split('=')[1];\n};","map":{"version":3,"sources":["E:/pratice-projects/next-js-redux/redux/authActions.js"],"names":["AUTHENTICATE","Router","cookie","authenticate","user","dispatch","response","type","payload","setTimeout","push","setCookie","key","value","set","expires","path","removeCookie","remove","getCookie","req","getCookieFromBrowser","getCookieFromServer","get","headers","undefined","rawCookie","split","find","c","trim","startsWith"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,SAA3B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,OAAO,MAAMC,YAAY,GAAGC,IAAI,IAAI;AAChC,SAAO,MAAOC,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,wDAAjB;AAEAD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEP,YADD;AAELQ,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAKAG,IAAAA,UAAU,CAAC,MAAM;AACbR,MAAAA,MAAM,CAACS,IAAP,CAAY,GAAZ;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAXD;AAYH,CAbM;AAeP,OAAO,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACrC,aAAqB;AACjBX,IAAAA,MAAM,CAACY,GAAP,CAAWF,GAAX,EAAgBC,KAAhB,EAAuB;AACnBE,MAAAA,OAAO,EAAE,CADU;AAEnBC,MAAAA,IAAI,EAAE;AAFa,KAAvB;AAIH;AACJ,CAPM;AASP,OAAO,MAAMC,YAAY,GAAGL,GAAG,IAAI;AAC/B,aAAqB;AACjBV,IAAAA,MAAM,CAACgB,MAAP,CAAcN,GAAd,EAAmB;AACfG,MAAAA,OAAO,EAAE;AADM,KAAnB;AAGH;AACJ,CANM;AAQP,OAAO,MAAMI,SAAS,GAAG,CAACP,GAAD,EAAMQ,GAAN,KAAc;AACnC,SAAO,QAAkBC,oBAAoB,CAACT,GAAD,CAAtC,GAA8CU,mBAAmB,CAACV,GAAD,EAAMQ,GAAN,CAAxE;AACH,CAFM;;AAIP,MAAMC,oBAAoB,GAAGT,GAAG,IAAI;AAChC,SAAOV,MAAM,CAACqB,GAAP,CAAWX,GAAX,CAAP;AACH,CAFD;;AAIA,MAAMU,mBAAmB,GAAG,CAACV,GAAD,EAAMQ,GAAN,KAAc;AACtC,MAAI,CAACA,GAAG,CAACI,OAAJ,CAAYtB,MAAjB,EAAyB;AACrB,WAAOuB,SAAP;AACH;;AACD,QAAMC,SAAS,GAAGN,GAAG,CAACI,OAAJ,CAAYtB,MAAZ,CAAmByB,KAAnB,CAAyB,GAAzB,EAA8BC,IAA9B,CAAmCC,CAAC,IAAIA,CAAC,CAACC,IAAF,GAASC,UAAT,CAAqB,GAAEnB,GAAI,GAA3B,CAAxC,CAAlB;;AACA,MAAI,CAACc,SAAL,EAAgB;AACZ,WAAOD,SAAP;AACH;;AACD,SAAOC,SAAS,CAACC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAP;AACH,CATD","sourcesContent":["import {AUTHENTICATE} from \"./types\";\r\nimport Router from \"next/router\";\r\nimport cookie from \"js-cookie\";\r\n\r\nexport const authenticate = user => {\r\n    return async (dispatch) => {\r\n        const response = \"143lkjnd0a9sjndkalnsdjl1nk2n1029jneklnasdmnaklsndiop12\"\r\n\r\n        dispatch({\r\n            type: AUTHENTICATE,\r\n            payload: response\r\n        });\r\n\r\n        setTimeout(() => {\r\n            Router.push(\"/\");\r\n        }, 1000)\r\n    }\r\n}\r\n\r\nexport const setCookie = (key, value) => {\r\n    if (process.browser) {\r\n        cookie.set(key, value, {\r\n            expires: 1,\r\n            path: '/'\r\n        });\r\n    }\r\n};\r\n\r\nexport const removeCookie = key => {\r\n    if (process.browser) {\r\n        cookie.remove(key, {\r\n            expires: 1\r\n        });\r\n    }\r\n};\r\n\r\nexport const getCookie = (key, req) => {\r\n    return process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\r\n};\r\n\r\nconst getCookieFromBrowser = key => {\r\n    return cookie.get(key);\r\n};\r\n\r\nconst getCookieFromServer = (key, req) => {\r\n    if (!req.headers.cookie) {\r\n        return undefined;\r\n    }\r\n    const rawCookie = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\r\n    if (!rawCookie) {\r\n        return undefined;\r\n    }\r\n    return rawCookie.split('=')[1];\r\n};"]},"metadata":{},"sourceType":"module"}