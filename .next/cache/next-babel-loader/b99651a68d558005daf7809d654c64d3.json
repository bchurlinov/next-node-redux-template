{"ast":null,"code":"import { AUTHENTICATE, DEAUTHENTICATE } from \"./types\";\nimport Router from \"next/router\";\nimport cookie from \"js-cookie\";\nexport const authenticate = user => {\n  return async dispatch => {\n    const response = \"143lkjnd0a9sjndkalnsdjl1nk2n1029jneklnasdmnaklsndiop12\";\n    setCookie(\"token\", response);\n    dispatch({\n      type: AUTHENTICATE,\n      payload: response\n    });\n    setTimeout(() => {\n      Router.push(\"/\");\n    }, 1000);\n  };\n}; // gets the token from the cookie and saves it in the store\n\nexport const reauthenticate = token => {\n  return dispatch => {\n    dispatch({\n      type: AUTHENTICATE,\n      payload: token\n    });\n  };\n}; // removing the token\n\nexport const deauthenticate = () => {\n  return dispatch => {\n    removeCookie('token');\n    Router.push('/');\n    dispatch({\n      type: DEAUTHENTICATE\n    });\n  };\n}; // Helper Functions\n\nexport const setCookie = (key, value) => {\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1,\n      path: '/'\n    });\n  }\n};\nexport const removeCookie = key => {\n  if (false) {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n};\nexport const getCookie = (key, req) => {\n  return false ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n};\n\nconst getCookieFromBrowser = key => {\n  return cookie.get(key);\n};\n\nconst getCookieFromServer = (key, req) => {\n  if (!req.headers.cookie) {\n    return undefined;\n  }\n\n  const rawCookie = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\n\n  if (!rawCookie) {\n    return undefined;\n  }\n\n  return rawCookie.split('=')[1];\n};\n\nexport const checkServerSideCookie = ctx => {\n  if (ctx.isServer) {\n    if (ctx.req.headers.cookie) {\n      const token = getCookie('token', ctx.req);\n      ctx.store.dispatch(reauthenticate(token));\n    }\n  } else {\n    const token = ctx.store.getState().authentication.token;\n\n    if (token && user && (ctx.pathname === '/signin' || ctx.pathname === '/signup')) {\n      setTimeout(function () {\n        Router.push('/');\n      }, 0);\n    }\n  }\n};","map":{"version":3,"sources":["E:/pratice-projects/next-js-redux/redux/authActions.js"],"names":["AUTHENTICATE","DEAUTHENTICATE","Router","cookie","authenticate","user","dispatch","response","setCookie","type","payload","setTimeout","push","reauthenticate","token","deauthenticate","removeCookie","key","value","set","expires","path","remove","getCookie","req","getCookieFromBrowser","getCookieFromServer","get","headers","undefined","rawCookie","split","find","c","trim","startsWith","checkServerSideCookie","ctx","isServer","store","getState","authentication","pathname"],"mappings":"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","sourcesContent":["import {AUTHENTICATE, DEAUTHENTICATE} from \"./types\";\r\nimport Router from \"next/router\";\r\nimport cookie from \"js-cookie\";\r\n\r\nexport const authenticate = user => {\r\n    return async (dispatch) => {\r\n        const response = \"143lkjnd0a9sjndkalnsdjl1nk2n1029jneklnasdmnaklsndiop12\";\r\n\r\n        setCookie(\"token\", response)\r\n\r\n        dispatch({\r\n            type: AUTHENTICATE,\r\n            payload: response\r\n        });\r\n\r\n        setTimeout(() => {\r\n            Router.push(\"/\");\r\n        }, 1000)\r\n    }\r\n}\r\n\r\n// gets the token from the cookie and saves it in the store\r\nexport const reauthenticate = token => {\r\n    return dispatch => {\r\n        dispatch({ type: AUTHENTICATE, payload: token });\r\n    };\r\n};\r\n\r\n// removing the token\r\nexport const deauthenticate = () => {\r\n    return dispatch => {\r\n        removeCookie('token');\r\n        Router.push('/');\r\n        dispatch({ type: DEAUTHENTICATE });\r\n    };\r\n};\r\n\r\n// Helper Functions\r\n\r\nexport const setCookie = (key, value) => {\r\n    if (process.browser) {\r\n        cookie.set(key, value, {\r\n            expires: 1,\r\n            path: '/'\r\n        });\r\n    }\r\n};\r\n\r\nexport const removeCookie = key => {\r\n    if (process.browser) {\r\n        cookie.remove(key, {\r\n            expires: 1\r\n        });\r\n    }\r\n};\r\n\r\nexport const getCookie = (key, req) => {\r\n    return process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\r\n};\r\n\r\nconst getCookieFromBrowser = key => {\r\n    return cookie.get(key);\r\n};\r\n\r\nconst getCookieFromServer = (key, req) => {\r\n    if (!req.headers.cookie) {\r\n        return undefined;\r\n    }\r\n    const rawCookie = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\r\n    if (!rawCookie) {\r\n        return undefined;\r\n    }\r\n    return rawCookie.split('=')[1];\r\n};\r\n\r\n\r\nexport const checkServerSideCookie = ctx => {\r\n    if (ctx.isServer) {\r\n        if (ctx.req.headers.cookie) {\r\n            const token = getCookie('token', ctx.req);\r\n            ctx.store.dispatch(reauthenticate(token));\r\n        }\r\n    } else {\r\n        const token = ctx.store.getState().authentication.token;\r\n\r\n        if (token && user && (ctx.pathname === '/signin' || ctx.pathname === '/signup')) {\r\n            setTimeout(function() {\r\n                Router.push('/');\r\n            }, 0);\r\n        }\r\n    }\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}