{"ast":null,"code":"import { AUTHENTICATE, DEAUTHENTICATE } from \"./types\";\nimport Router from \"next/router\";\nimport cookie from \"js-cookie\";\nimport axios from \"axios\";\nexport const authenticate = user => {\n  return async dispatch => {\n    const response = await axios.post(\"http://localhost:3000/api/auth/login\", user);\n    console.log(response.data);\n    setCookie(\"token\", response);\n    dispatch({\n      type: AUTHENTICATE,\n      payload: response\n    });\n    setTimeout(() => {\n      Router.push(\"/\");\n    }, 1000);\n  };\n}; // gets the token from the cookie and saves it in the store\n\nexport const reauthenticate = token => {\n  return dispatch => {\n    dispatch({\n      type: AUTHENTICATE,\n      payload: token\n    });\n  };\n}; // removing the token\n\nexport const deauthenticate = () => {\n  return dispatch => {\n    removeCookie('token');\n    Router.push('/');\n    dispatch({\n      type: DEAUTHENTICATE\n    });\n  };\n}; // Helper Functions\n\nexport const setCookie = (key, value) => {\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1,\n      path: '/'\n    });\n  }\n};\nexport const removeCookie = key => {\n  if (false) {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n};\nexport const getCookie = (key, req) => {\n  return false ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n};\n\nconst getCookieFromBrowser = key => {\n  return cookie.get(key);\n};\n\nconst getCookieFromServer = (key, req) => {\n  if (!req.headers.cookie) {\n    return undefined;\n  }\n\n  const rawCookie = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\n\n  if (!rawCookie) {\n    return undefined;\n  }\n\n  return rawCookie.split('=')[1];\n};","map":{"version":3,"sources":["E:/pratice-projects/next-js-redux/redux/authActions.js"],"names":["AUTHENTICATE","DEAUTHENTICATE","Router","cookie","axios","authenticate","user","dispatch","response","post","console","log","data","setCookie","type","payload","setTimeout","push","reauthenticate","token","deauthenticate","removeCookie","key","value","set","expires","path","remove","getCookie","req","getCookieFromBrowser","getCookieFromServer","get","headers","undefined","rawCookie","split","find","c","trim","startsWith"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,cAAtB,QAA2C,SAA3C;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,YAAY,GAAGC,IAAI,IAAI;AAChC,SAAO,MAAOC,QAAP,IAAoB;AAEvB,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAN,CAAW,sCAAX,EAAmDH,IAAnD,CAAvB;AAKJI,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;AACIC,IAAAA,SAAS,CAAC,OAAD,EAAUL,QAAV,CAAT;AAEAD,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEd,YADD;AAELe,MAAAA,OAAO,EAAEP;AAFJ,KAAD,CAAR;AAKAQ,IAAAA,UAAU,CAAC,MAAM;AACbd,MAAAA,MAAM,CAACe,IAAP,CAAY,GAAZ;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAlBD;AAmBH,CApBM,C,CAsBP;;AACA,OAAO,MAAMC,cAAc,GAAGC,KAAK,IAAI;AACnC,SAAOZ,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAEd,YAAR;AAAsBe,MAAAA,OAAO,EAAEI;AAA/B,KAAD,CAAR;AACH,GAFD;AAGH,CAJM,C,CAMP;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,SAAOb,QAAQ,IAAI;AACfc,IAAAA,YAAY,CAAC,OAAD,CAAZ;AACAnB,IAAAA,MAAM,CAACe,IAAP,CAAY,GAAZ;AACAV,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAEb;AAAR,KAAD,CAAR;AACH,GAJD;AAKH,CANM,C,CAQP;;AAEA,OAAO,MAAMY,SAAS,GAAG,CAACS,GAAD,EAAMC,KAAN,KAAgB;AACrC,aAAqB;AACjBpB,IAAAA,MAAM,CAACqB,GAAP,CAAWF,GAAX,EAAgBC,KAAhB,EAAuB;AACnBE,MAAAA,OAAO,EAAE,CADU;AAEnBC,MAAAA,IAAI,EAAE;AAFa,KAAvB;AAIH;AACJ,CAPM;AASP,OAAO,MAAML,YAAY,GAAGC,GAAG,IAAI;AAC/B,aAAqB;AACjBnB,IAAAA,MAAM,CAACwB,MAAP,CAAcL,GAAd,EAAmB;AACfG,MAAAA,OAAO,EAAE;AADM,KAAnB;AAGH;AACJ,CANM;AAQP,OAAO,MAAMG,SAAS,GAAG,CAACN,GAAD,EAAMO,GAAN,KAAc;AACnC,SAAO,QAAkBC,oBAAoB,CAACR,GAAD,CAAtC,GAA8CS,mBAAmB,CAACT,GAAD,EAAMO,GAAN,CAAxE;AACH,CAFM;;AAIP,MAAMC,oBAAoB,GAAGR,GAAG,IAAI;AAChC,SAAOnB,MAAM,CAAC6B,GAAP,CAAWV,GAAX,CAAP;AACH,CAFD;;AAIA,MAAMS,mBAAmB,GAAG,CAACT,GAAD,EAAMO,GAAN,KAAc;AACtC,MAAI,CAACA,GAAG,CAACI,OAAJ,CAAY9B,MAAjB,EAAyB;AACrB,WAAO+B,SAAP;AACH;;AACD,QAAMC,SAAS,GAAGN,GAAG,CAACI,OAAJ,CAAY9B,MAAZ,CAAmBiC,KAAnB,CAAyB,GAAzB,EAA8BC,IAA9B,CAAmCC,CAAC,IAAIA,CAAC,CAACC,IAAF,GAASC,UAAT,CAAqB,GAAElB,GAAI,GAA3B,CAAxC,CAAlB;;AACA,MAAI,CAACa,SAAL,EAAgB;AACZ,WAAOD,SAAP;AACH;;AACD,SAAOC,SAAS,CAACC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAP;AACH,CATD","sourcesContent":["import {AUTHENTICATE, DEAUTHENTICATE} from \"./types\";\r\nimport Router from \"next/router\";\r\nimport cookie from \"js-cookie\";\r\nimport axios from \"axios\";\r\n\r\nexport const authenticate = user => {\r\n    return async (dispatch) => {\r\n\r\n        const response = await axios.post(\"http://localhost:3000/api/auth/login\", user);\r\n\r\n\r\n      \r\n\r\n    console.log(response.data);\r\n        setCookie(\"token\", response);\r\n\r\n        dispatch({\r\n            type: AUTHENTICATE,\r\n            payload: response\r\n        });\r\n\r\n        setTimeout(() => {\r\n            Router.push(\"/\");\r\n        }, 1000)\r\n    }\r\n}\r\n\r\n// gets the token from the cookie and saves it in the store\r\nexport const reauthenticate = token => {\r\n    return dispatch => {\r\n        dispatch({ type: AUTHENTICATE, payload: token });\r\n    };\r\n};\r\n\r\n// removing the token\r\nexport const deauthenticate = () => {\r\n    return dispatch => {\r\n        removeCookie('token');\r\n        Router.push('/');\r\n        dispatch({ type: DEAUTHENTICATE });\r\n    };\r\n};\r\n\r\n// Helper Functions\r\n\r\nexport const setCookie = (key, value) => {\r\n    if (process.browser) {\r\n        cookie.set(key, value, {\r\n            expires: 1,\r\n            path: '/'\r\n        });\r\n    }\r\n};\r\n\r\nexport const removeCookie = key => {\r\n    if (process.browser) {\r\n        cookie.remove(key, {\r\n            expires: 1\r\n        });\r\n    }\r\n};\r\n\r\nexport const getCookie = (key, req) => {\r\n    return process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\r\n};\r\n\r\nconst getCookieFromBrowser = key => {\r\n    return cookie.get(key);\r\n};\r\n\r\nconst getCookieFromServer = (key, req) => {\r\n    if (!req.headers.cookie) {\r\n        return undefined;\r\n    }\r\n    const rawCookie = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\r\n    if (!rawCookie) {\r\n        return undefined;\r\n    }\r\n    return rawCookie.split('=')[1];\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}